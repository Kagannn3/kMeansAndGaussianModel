"""
Django settings for todo_list project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

CELERY_BROKER_URL='redis://localhost:6379' 
CELERY_RESULT_BACKEND='django-db'  # result task queue for each users 
CELERY_ACCEPT_CONTENT= ['json']    # the each corresponding task queue accepts only json format ,
CELERY_TASK_SERIALIZER= 'json'     # this specifies each of subdata for the each of tasks to the all users 
CELERY_RESULT_SERIALIZER='json'    # the result of task queues should be json format 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y%r4!@e9dzhw0r1qe3d_j_d#flk=qjpy_+wbsgmkwkk8x%$o9n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base.apps.BaseConfig',
    # points to the custom app configuration class 
    # refers to a custom AppConfig class inside the app, 
    # which provides more control over the app's behaviour 
    'rest_framework',
    #'base', refers to the app's folder without any configuration 
    'drf_yasg', # for API documentation view 
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'todo_list.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todo_list.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# this constant dictionary controls that authentication and authorization on the database
REST_FRAMEWORK={
    'DEFAULT_AUTHENTICATED_CLASSES':(
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Pagination breaks your API's responses into pages 
    # Django Rest Framework has built-in support for pagination
    # when a user sends a GET request to todo_items/, the resonse will now be paginated 
    # clients can add query parameters to control the page they want to see, for instance, "GET/todo_items/?page2"
    # this page 2 is consists of the items between 10-20 items 
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10, # number of items per page 

    # There is a django_filters module(.py file), which includes some beneficial filter functions in django based applications
    # there is a rest_framework module(.py file) in the django_filters module, which is used for API requests and responses 
    # there is a DjangoFilterBackend class in the rest_framework module, which provides that able to filtering during API requests and responses
    'DEFAULT_FILTER_BACKENDS':['django_filters.rest_framework.DjangoFilterBackend'],
}


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOGIN_URL= 'login'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
